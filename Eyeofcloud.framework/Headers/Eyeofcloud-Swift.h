#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef EYEOFCLOUD_SWIFT_H
#define EYEOFCLOUD_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Eyeofcloud",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSURL;
@class NSData;

SWIFT_CLASS("_TtC10Eyeofcloud16EventForDispatch")
@interface EventForDispatch : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, copy) NSString * _Nonnull eventEndpoint;)
+ (NSString * _Nonnull)eventEndpoint SWIFT_WARN_UNUSED_RESULT;
+ (void)setEventEndpoint:(NSString * _Nonnull)value;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSData * _Nonnull body;
- (nonnull instancetype)initWithUrl:(NSURL * _Nullable)url body:(NSData * _Nonnull)body OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EventForDispatch (SWIFT_EXTENSION(Eyeofcloud))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC10Eyeofcloud16EyeofcloudClient")
@interface EyeofcloudClient : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@class EyeofcloudUserContext;
@protocol OPTLogger;
@protocol OPTEventDispatcher;
@protocol OPTUserProfileService;
@class NSNumber;
enum EyeofcloudLogLevel : NSInteger;

@interface EyeofcloudClient (SWIFT_EXTENSION(Eyeofcloud))
- (EyeofcloudUserContext * _Nonnull)createUserContextWithUserId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey logger:(id <OPTLogger> _Nullable)logger eventDispatcher:(id <OPTEventDispatcher> _Nullable)eventDispatcher userProfileService:(id <OPTUserProfileService> _Nullable)userProfileService periodicDownloadInterval:(NSNumber * _Nullable)periodicDownloadInterval defaultLogLevel:(enum EyeofcloudLogLevel)defaultLogLevel defaultDecideOptions:(NSArray<NSNumber *> * _Nullable)defaultDecideOptions;
@end

@protocol OPTNotificationCenter;

@interface EyeofcloudClient (SWIFT_EXTENSION(Eyeofcloud))
@property (nonatomic, readonly, strong) id <OPTNotificationCenter> _Nonnull notificationCenter;
@end




@class NSError;
@class EyeofcloudJSON;
@protocol EyeofcloudConfig;

@interface EyeofcloudClient (SWIFT_EXTENSION(Eyeofcloud))
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey;
- (nonnull instancetype)initWithSdkKey:(NSString * _Nonnull)sdkKey logger:(id <OPTLogger> _Nullable)logger eventDispatcher:(id <OPTEventDispatcher> _Nullable)eventDispatcher userProfileService:(id <OPTUserProfileService> _Nullable)userProfileService periodicDownloadInterval:(NSNumber * _Nullable)periodicDownloadInterval defaultLogLevel:(enum EyeofcloudLogLevel)defaultLogLevel;
- (void)startWithCompletion:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable))completion;
- (BOOL)startWithDatafile:(NSString * _Nonnull)datafile error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startWithDatafile:(NSData * _Nonnull)datafile doFetchDatafileBackground:(BOOL)doFetchDatafileBackground error:(NSError * _Nullable * _Nullable)error;
- (BOOL)startWithDatafile:(NSData * _Nonnull)datafile doUpdateConfigOnNewDatafile:(BOOL)doUpdateConfigOnNewDatafile doFetchDatafileBackground:(BOOL)doFetchDatafileBackground error:(NSError * _Nullable * _Nullable)error;
- (NSString * _Nullable)activateWithExperimentKey:(NSString * _Nonnull)experimentKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getVariationKeyWithExperimentKey:(NSString * _Nonnull)experimentKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getForcedVariationWithExperimentKey:(NSString * _Nonnull)experimentKey userId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setForcedVariationWithExperimentKey:(NSString * _Nonnull)experimentKey userId:(NSString * _Nonnull)userId variationKey:(NSString * _Nullable)variationKey SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFeatureEnabledWithFeatureKey:(NSString * _Nonnull)featureKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)getFeatureVariableBooleanWithFeatureKey:(NSString * _Nonnull)featureKey variableKey:(NSString * _Nonnull)variableKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)getFeatureVariableDoubleWithFeatureKey:(NSString * _Nonnull)featureKey variableKey:(NSString * _Nonnull)variableKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSNumber * _Nullable)getFeatureVariableIntegerWithFeatureKey:(NSString * _Nonnull)featureKey variableKey:(NSString * _Nonnull)variableKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getFeatureVariableStringWithFeatureKey:(NSString * _Nonnull)featureKey variableKey:(NSString * _Nonnull)variableKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (EyeofcloudJSON * _Nullable)getFeatureVariableJSONWithFeatureKey:(NSString * _Nonnull)featureKey variableKey:(NSString * _Nonnull)variableKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (EyeofcloudJSON * _Nullable)getAllFeatureVariablesWithFeatureKey:(NSString * _Nonnull)featureKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getEnabledFeaturesWithUserId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackWithEventKey:(NSString * _Nonnull)eventKey userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes eventTags:(NSDictionary<NSString *, id> * _Nullable)eventTags error:(NSError * _Nullable * _Nullable)error;
/// Read a copy of project configuration data model.
/// This call returns a snapshot of the current project configuration.
/// If a datafile change is notified (NotificationType.datafileChange), this method should be called again to get the updated configuration data.
///
/// throws:
/// <code>EyeofcloudError</code> if SDK is not ready
///
/// returns:
/// a snapshot of public project configuration data model
- (id <EyeofcloudConfig> _Nullable)getEyeofcloudConfigWithError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Options controlling flag decisions.
typedef SWIFT_ENUM(NSInteger, EyeofcloudDecideOption, closed) {
/// disable decision event tracking.
  EyeofcloudDecideOptionDisableDecisionEvent = 0,
/// return decisions only for flags which are enabled (decideAll only).
  EyeofcloudDecideOptionEnabledFlagsOnly = 1,
/// skip user profile service for decision.
  EyeofcloudDecideOptionIgnoreUserProfileService = 2,
/// include info and debug messages in the decision reasons.
  EyeofcloudDecideOptionIncludeReasons = 3,
/// exclude variable values from the decision result.
  EyeofcloudDecideOptionExcludeVariables = 4,
};


SWIFT_CLASS("_TtC10Eyeofcloud14EyeofcloudJSON")
@interface EyeofcloudJSON : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface EyeofcloudJSON (SWIFT_EXTENSION(Eyeofcloud))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface EyeofcloudJSON (SWIFT_EXTENSION(Eyeofcloud))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface EyeofcloudJSON (SWIFT_EXTENSION(Eyeofcloud))
///
/// returns:
/// true when one or more variables are included.
- (BOOL)isEmpty SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toString SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, id> * _Nonnull)toMap SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, EyeofcloudLogLevel, closed) {
/// If the filter level is set to EyeofcloudLogLevelOff, all log messages will be suppressed.
  EyeofcloudLogLevelOff = 0,
/// Any error that is not causing a crash of the application: unknown experiment referenced.
  EyeofcloudLogLevelError = 1,
/// Anything that can potentially cause problems: method will be deprecated.
  EyeofcloudLogLevelWarning = 2,
/// Useful information: Lifecycle events, successfully activated experiment, parsed datafile.
  EyeofcloudLogLevelInfo = 3,
/// Information diagnostically helpful: sending events, assigning buckets.
  EyeofcloudLogLevelDebug = 4,
/// Used for the most granular logging: method flows, variable values.
  EyeofcloudLogLevelVerbose = 5,
};


/// Enum representing notification types.
typedef SWIFT_ENUM(NSInteger, NotificationType, closed) {
  NotificationTypeActivate = 1,
  NotificationTypeTrack = 2,
  NotificationTypeDatafileChange = 3,
  NotificationTypeDecision = 4,
  NotificationTypeLogEvent = 5,
};


/// Any logger must implement these following methods.
SWIFT_PROTOCOL("_TtP10Eyeofcloud9OPTLogger_")
@protocol OPTLogger
/// The log level the Logger is initialized with.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum EyeofcloudLogLevel logLevel;)
+ (enum EyeofcloudLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum EyeofcloudLogLevel)newValue;
/// Initialize a new Eyeofcloud Logger instance.
- (nonnull instancetype)init;
/// Log a message at a certain level.
/// \param level The priority level of the log.
///
/// \param message The message to log.
///
- (void)logWithLevel:(enum EyeofcloudLogLevel)level message:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC10Eyeofcloud16OPTLoggerFactory")
@interface OPTLoggerFactory : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP10Eyeofcloud21OPTUserProfileService_")
@protocol OPTUserProfileService
- (nonnull instancetype)init;
/// Returns a user entity corresponding to the user ID.
/// <ul>
///   <li>
///   </li>
/// </ul>
/// \param userId The user id to get the user entity of.
///
///
/// returns:
/// A dictionary of the user profile details.
- (NSDictionary<NSString *, id> * _Nullable)lookupWithUserId:(NSString * _Nonnull)userId SWIFT_WARN_UNUSED_RESULT;
/// Saves the user profile.
/// <ul>
///   <li>
///   </li>
/// </ul>
/// \param userProfile The user profile.
///
- (void)saveWithUserProfile:(NSDictionary<NSString *, id> * _Nonnull)userProfile;
@end



SWIFT_PROTOCOL_NAMED("_ObjcOPTEventDispatcher")
@protocol OPTEventDispatcher
- (void)dispatchEventWithEvent:(EventForDispatch * _Nonnull)event completionHandler:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable))completionHandler;
/// Attempts to flush the event queue if there are any events to process.
- (void)flushEvents;
@end


SWIFT_CLASS_NAMED("ObjEventDispatcher")
@interface DefaultEventDispatcher : NSObject <OPTEventDispatcher>
- (nonnull instancetype)initWithBatchSize:(NSInteger)batchSize timerInterval:(NSTimeInterval)timerInterval maxQueueSize:(NSInteger)maxQueueSize OBJC_DESIGNATED_INITIALIZER;
- (void)dispatchEventWithEvent:(EventForDispatch * _Nonnull)event completionHandler:(void (^ _Nullable)(NSData * _Nullable, NSError * _Nullable))completionHandler;
- (void)flushEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudAttribute")
@protocol EyeofcloudAttribute
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@end


SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudAudience")
@protocol EyeofcloudAudience
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, copy) NSString * _Nonnull conditions;
@end

@protocol EyeofcloudExperiment;
@protocol EyeofcloudFeature;
@protocol EyeofcloudEvent;

/// Objective-C interface for EyeofcloudConfig
SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudConfig")
@protocol EyeofcloudConfig
@property (nonatomic, readonly, copy) NSString * _Nonnull environmentKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull revision;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkKey;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudExperiment>> * _Nonnull experimentsMap;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudFeature>> * _Nonnull featuresMap;
@property (nonatomic, readonly, copy) NSArray<id <EyeofcloudAttribute>> * _Nonnull attributes;
@property (nonatomic, readonly, copy) NSArray<id <EyeofcloudAudience>> * _Nonnull audiences;
@property (nonatomic, readonly, copy) NSArray<id <EyeofcloudEvent>> * _Nonnull events;
@end


SWIFT_CLASS_NAMED("ObjcEyeofcloudDecision")
@interface EyeofcloudDecision : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable variationKey;
@property (nonatomic, readonly) BOOL enabled;
@property (nonatomic, readonly, strong) EyeofcloudJSON * _Nonnull variables;
@property (nonatomic, readonly, copy) NSString * _Nullable ruleKey;
@property (nonatomic, readonly, copy) NSString * _Nonnull flagKey;
@property (nonatomic, readonly, strong) EyeofcloudUserContext * _Nonnull userContext;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull reasons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudEvent")
@protocol EyeofcloudEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull experimentIds;
@end

@protocol EyeofcloudVariation;

SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudExperiment")
@protocol EyeofcloudExperiment
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull audiences;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudVariation>> * _Nonnull variationsMap;
@end

@protocol EyeofcloudVariable;

SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudFeature")
@protocol EyeofcloudFeature
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSArray<id <EyeofcloudExperiment>> * _Nonnull experimentRules;
@property (nonatomic, readonly, copy) NSArray<id <EyeofcloudExperiment>> * _Nonnull deliveryRules;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudVariable>> * _Nonnull variablesMap;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudExperiment>> * _Nonnull experimentsMap SWIFT_DEPRECATED_MSG("Use experimentRules and deliveryRules");
@end


SWIFT_CLASS_NAMED("ObjcEyeofcloudUserContext")
@interface EyeofcloudUserContext : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull userId;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull attributes;
@property (nonatomic, readonly, strong) EyeofcloudClient * _Nullable eyeofcloud;
- (nonnull instancetype)initWithEyeofcloud:(EyeofcloudClient * _Nonnull)eyeofcloud userId:(NSString * _Nonnull)userId attributes:(NSDictionary<NSString *, id> * _Nullable)attributes OBJC_DESIGNATED_INITIALIZER;
- (void)setAttributeWithKey:(NSString * _Nonnull)key value:(id _Nonnull)value;
- (EyeofcloudDecision * _Nonnull)decideWithKey:(NSString * _Nonnull)key options:(NSArray<NSNumber *> * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, EyeofcloudDecision *> * _Nonnull)decideWithKeys:(NSArray<NSString *> * _Nonnull)keys options:(NSArray<NSNumber *> * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
- (NSDictionary<NSString *, EyeofcloudDecision *> * _Nonnull)decideAllWithOptions:(NSArray<NSNumber *> * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
- (BOOL)trackEventWithEventKey:(NSString * _Nonnull)eventKey eventTags:(NSDictionary<NSString *, id> * _Nullable)eventTags error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudVariable")
@protocol EyeofcloudVariable
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@end


SWIFT_PROTOCOL_NAMED("ObjcEyeofcloudVariation")
@protocol EyeofcloudVariation
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
@property (nonatomic, readonly) BOOL featureEnabled;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id <EyeofcloudVariable>> * _Nonnull variablesMap;
@end


SWIFT_PROTOCOL_NAMED("ObjcOPTNotificationCenter")
@protocol OPTNotificationCenter
/// Add an activate notification listener to the notification center.
/// \param activateListener Notification to add.
///
///
/// returns:
/// the notification id used to remove the notification. It is greater than 0 on success.
- (NSNumber * _Nullable)addActivateNotificationListenerWithActivateListener:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull, NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSDictionary<NSString *, id> * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))activateListener SWIFT_WARN_UNUSED_RESULT;
/// Add a track notification listener to the notification center.
/// \param trackListener Notification to add.
///
///
/// returns:
/// the notification id used to remove the notification. It is greater than 0 on success.
- (NSNumber * _Nullable)addTrackNotificationListenerWithTrackListener:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSDictionary<NSString *, id> * _Nullable, NSDictionary<NSString *, id> * _Nonnull))trackListener SWIFT_WARN_UNUSED_RESULT;
/// Add a decision notification listener to the notification center.
/// \param decisionListener Notification to add.
///
///
/// returns:
/// the notification id used to remove the notification. It is greater than 0 on success.
- (NSNumber * _Nullable)addDecisionNotificationListenerWithDecisionListener:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSDictionary<NSString *, id> * _Nullable, NSDictionary<NSString *, id> * _Nonnull))decisionListener SWIFT_WARN_UNUSED_RESULT;
/// Add a datafile change notification listener
/// \param datafileListener Notification to add.
///
///
/// returns:
/// the notification id used to remove the notification. It is greater than 0 on success.
- (NSNumber * _Nullable)addDatafileChangeNotificationListenerWithDatafileListener:(void (^ _Nonnull)(NSData * _Nonnull))datafileListener SWIFT_WARN_UNUSED_RESULT;
/// Add a event dispatch notification listener
/// \param logEventListener Notification to add.
///
///
/// returns:
/// the notification id used to remove the notification. It is greater than 0 on success.
- (NSNumber * _Nullable)addLogEventNotificationListenerWithLogEventListener:(void (^ _Nonnull)(NSString * _Nonnull, NSDictionary<NSString *, id> * _Nonnull))logEventListener SWIFT_WARN_UNUSED_RESULT;
/// Remove the notification listener based on the notificationId passed back from addNotification.
/// \param notificationId the id passed back from add notification.
///
///
/// returns:
/// true if removed otherwise false (if the notification is already removed, it returns false).
- (void)removeNotificationListenerWithNotificationId:(NSInteger)notificationId;
/// Clear notification listeners by notification type.
/// \param type type of OPTLYNotificationType to remove.
///
- (void)clearNotificationListenersWithType:(enum NotificationType)type;
/// Clear out all the notification listeners.
- (void)clearAllNotificationListeners;
@end


#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
